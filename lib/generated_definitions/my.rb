# encoding: utf-8
module Holidays
  # This file is generated by the Ruby Holidays gem.
  #
  # Definitions loaded: definitions/my.yaml
  #
  # All the definitions are available at https://github.com/holidays/holidays
  module MY # :nodoc:
    def self.defined_regions
      [:my]
    end

    def self.holidays_by_month
      {
              1 => [{:mday => 1, :name => "New Year's Day", :regions => [:my]}],
      5 => [{:mday => 1, :name => "Labour Day", :regions => [:my]}],
      6 => [{:function => "agong_birthday_june(year)", :function_arguments => [:year], :name => "Agong's Birthday", :regions => [:my]}],
      7 => [{:function => "agong_birthday_july(year)", :function_arguments => [:year], :name => "Agong's Birthday", :regions => [:my]}],
      8 => [{:mday => 31, :observed => "to_weekday_if_weekend(date)", :observed_arguments => [:date], :name => "Independence Day", :regions => [:my]}],
      9 => [{:mday => 16, :name => "Malaysia Day", :regions => [:my]}],
      12 => [{:mday => 25, :observed => "to_weekday_if_weekend(date)", :observed_arguments => [:date], :name => "Christmas Day", :regions => [:my]}]
      }
    end

    def self.custom_methods
      {
        "agong_birthday_june(year)" => Proc.new { |year|
if year <= 2016
  Date.new(year, 6, 4)
else
  nil
end
},

"agong_birthday_july(year)" => Proc.new { |year|
if year >= 2017
  Holidays::Factory::DateCalculator.day_of_month_calculator.call(year, 7, :last, :saturday)
else
  nil
end
},


      }
    end
  end
end
