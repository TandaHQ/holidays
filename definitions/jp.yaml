# Japanese holiday definitions for Ruby Holiday gem.
# Reference:
#   - http://www.h3.dion.ne.jp/~sakatsu/holiday_topic.htm
#   - http://www8.cao.go.jp/chosei/shukujitsu/gaiyou.html
#   - https://en.wikipedia.org/wiki/Public_holidays_in_Japan
#
# For Japanese/English translations of each holiday:
#   - http://www.japanesecalendar.net/holidays/2016/
#
# This definition can calculate current Japanese holidays,
# don't compat with past changes of Japan Holiday Act.
#
# CHANGES:
#  2010-12-25: Initial version by Tatsuki Sugiura <sugi@nemui.org>
#  2014-11-09: Added substitute holiday by Yoshiyuki Hirano <yoshiyuki.hirano@henteco-labs.com>
#  2015-05-10: Non-Monday substitute holidays by Shuhei Kagawa <shuhei.kagawa@gmail.com>
#  2015-12-15: Added mountain day by Tsuyoshi Sano <ttwo32@gmail.com>
#  2016-03-26: Updated to match new custom method signature. See below for more. Phil Trimble <philtrimble@gmail.com>
#
# NOTE: This is the most complex set of custom date methods in the entire
# project, mainly surrounding the idea of 'substitute' holidays. Since this is
# the only one that is this complex I have settled on a less-than-ideal solution.
# It is overly verbose and not easy to follow. It will be a target for refactoring
# in the near future.
---
months:
  1:
  - name: 元日
    regions: [jp]
    mday: 1
  - name: 成人の日
    regions: [jp]
    wday: 1
    week: 2
  - name: 振替休日
    regions: [jp]
    mday: 1
    function: jp_substitute_holiday(year, month, day)
  2:
  - name: 建国記念日
    regions: [jp]
    mday: 11
  - name: 振替休日
    regions: [jp]
    mday: 11
    function: jp_substitute_holiday(year, month, day)
  3:
  - name: 春分の日
    regions: [jp]
    function: jp_vernal_equinox_day(year)
  - name: 振替休日
    regions: [jp]
    function: jp_vernal_equinox_day_substitute(year)
  4:
  - name: 昭和の日
    regions: [jp]
    mday: 29
  - name: 振替休日
    regions: [jp]
    mday: 29
    function: jp_substitute_holiday(year, month, day)
  5:
  - name: 憲法記念日
    regions: [jp]
    mday: 3
  - name: みどりの日
    regions: [jp]
    mday: 4
  - name: こどもの日
    regions: [jp]
    mday: 5
  - name: 振替休日
    regions: [jp]
    mday: 3
    function: jp_substitute_holiday(year, month, day)
  - name: 振替休日
    regions: [jp]
    mday: 4
    function: jp_substitute_holiday(year, month, day)
  - name: 振替休日
    regions: [jp]
    mday: 5
    function: jp_substitute_holiday(year, month, day)
  7:
  - name: 海の日
    regions: [jp]
    mday: 20
    year_ranges:
      - between: 1996..2002
  - name: 海の日
    regions: [jp]
    wday: 1
    week: 3
    year_ranges:
      - after: 2003
  - name: 振替休日
    regions: [jp]
    function: jp_marine_day_substitute(year)
    year_ranges:
      - between: 1996..2002
  8:
  - name: 山の日
    regions: [jp]
    year_ranges:
      - after: 2016
    function: jp_mountain_holiday(year)
  - name: 振替休日
    regions: [jp]
    year_ranges:
      - after: 2016
    function: jp_mountain_holiday_substitute(year)
  9:
  - name: 敬老の日
    regions: [jp]
    wday: 1
    week: 3
  - name: 振替休日
    regions: [jp]
    function: jp_respect_for_aged_holiday_substitute(year)
  - name: 国民の休日
    regions: [jp]
    year_ranges:
      - after: 2003
    function: jp_citizens_holiday(year)
  - name: 秋分の日
    regions: [jp]
    function: jp_national_culture_day(year)
  - name: 振替休日
    regions: [jp]
    function: jp_national_culture_day_substitute(year)
  10:
  - name: 体育の日
    regions: [jp]
    wday: 1
    week: 2
  - name: 振替休日
    regions: [jp]
    function: jp_health_sports_day_substitute(year)
  11:
  - name: 文化の日
    regions: [jp]
    mday: 3
  - name: 振替休日
    regions: [jp]
    mday: 3
    function: jp_substitute_holiday(year, month, day)
  - name: 勤労感謝の日
    regions: [jp]
    mday: 23
  - name: 振替休日
    regions: [jp]
    mday: 23
    function: jp_substitute_holiday(year, month, day)
  12:
  - name: 天皇誕生日
    regions: [jp]
    mday: 23
  - name: 振替休日
    regions: [jp]
    mday: 23
    function: jp_substitute_holiday(year, month, day)

methods:
  jp_health_sports_day_substitute:
    arguments: year
    source: |
      Holidays::Factory::Definition.custom_methods_repository.find("jp_substitute_holiday(year, month, day)").call(year, 10, Holidays::Factory::DateCalculator.day_of_month_calculator.call(year, 10, 2, 1))
  jp_vernal_equinox_day:
    arguments: year
    source: |
      day =
        case year
        when 1851..1899
          19.8277
        when 1900..1979
          20.8357
        when 1980..2099
          20.8431
        when 2100..2150
          21.8510
        else
          raise IndexError.new("Out of range")
        end
      day += 0.242194 * (year - 1980) - ((year - 1980)/4).floor
      day = day.floor
      Date.civil(year, 3, day)
  jp_vernal_equinox_day_substitute:
    arguments: year
    source: |
      date = Holidays::Factory::Definition.custom_methods_repository.find("jp_vernal_equinox_day(year)").call(year)
      Holidays::Factory::Definition.custom_methods_repository.find("jp_substitute_holiday(year, month, day)").call(year, date.month, date.mday)
  jp_marine_day_substitute:
    arguments: year
    source: |
      Holidays::Factory::Definition.custom_methods_repository.find("jp_substitute_holiday(year, month, day)").call(year, 7, Holidays::Factory::DateCalculator.day_of_month_calculator.call(year, 7, 3, 1))
  jp_national_culture_day:
    arguments: year
    source: |
      day =
        case year
        when 1851..1899
          22.2588
        when 1900..1979
          23.2588
        when 1980..2099
          23.2488
        when 2100..2150
          24.2488
        else
          raise IndexError.new("Out of range")
        end
      day += 0.242194 * (year - 1980) - ((year - 1980)/4).floor
      day = day.floor
      Date.civil(year, 9, day)
  jp_national_culture_day_substitute:
    arguments: year
    source: |
      date = Holidays::Factory::Definition.custom_methods_repository.find("jp_national_culture_day(year)").call(year)
      Holidays::Factory::Definition.custom_methods_repository.find("jp_substitute_holiday(year, month, day)").call(year, date.month, date.mday)
  jp_citizens_holiday:
    arguments: year
    source: |
      ncd = Holidays::Factory::Definition.custom_methods_repository.find("jp_national_culture_day(year)").call(year)
      if ncd.wday == 3
        ncd - 1
      else
        nil
      end
  jp_mountain_holiday:
    arguments: year
    source: |
      Date.civil(year, 8, 11)
  jp_mountain_holiday_substitute:
    arguments: year
    source: |
      date = Holidays::Factory::Definition.custom_methods_repository.find("jp_mountain_holiday(year)").call(year)
      Holidays::Factory::Definition.custom_methods_repository.find("jp_substitute_holiday(year, month, day)").call(year, date.month, date.mday)
  jp_respect_for_aged_holiday_substitute:
    arguments: year
    source: |
      Holidays::Factory::Definition.custom_methods_repository.find("jp_substitute_holiday(year, month, day)").call(year, 9, Holidays::Factory::DateCalculator.day_of_month_calculator.call(year, 9, 3, 1))
  jp_substitute_holiday:
    arguments: year, month, day
    source: |
      date = Date.civil(year, month, day)
      date.wday == 0 ? (Holidays::Factory::Definition.custom_methods_repository.find("jp_next_weekday(date)").call(date+1)) : nil
  jp_next_weekday:
    arguments: date
    source: |
      is_holiday = Holidays::JP.holidays_by_month[date.month].any? do |holiday|
        holiday[:mday] == date.day
      end
      date.wday == 0 || is_holiday ? (Holidays::Factory::Definition.custom_methods_repository.find("jp_next_weekday(date)").call(date+1)) : date

tests: |
  {Date.civil(2008,1,1) => '元日',
   Date.civil(2010,1,11) => '成人の日',
   Date.civil(2008,2,11) => '建国記念日',
   Date.civil(2008,4,29) => '昭和の日',
   Date.civil(2008,5,3) => '憲法記念日',
   Date.civil(2008,5,5) => 'こどもの日',
   Date.civil(2010,7,19) => '海の日',
   Date.civil(2010,9,20) => '敬老の日',
   Date.civil(2010,10,11) => '体育の日',
   Date.civil(2008,11,3) => '文化の日',
   Date.civil(2008,11,23) => '勤労感謝の日',
   Date.civil(2008,12,23) => '天皇誕生日',
   Date.civil(2010,3,22) => '振替休日',
   Date.civil(2008,11,24) => '振替休日',
   Date.civil(2012,1,2) => '振替休日',
   Date.civil(2013,5,6) => '振替休日',
   Date.civil(2014,5,6) => '振替休日',
   Date.civil(2015,5,6) => '振替休日',
   Date.civil(2019,8,12) => '振替休日'
  }.each do |date, name|
     assert_equal name, (Holidays.on(date, :jp, :informal)[0] || {})[:name]
  end

  # vernal equinox day
  [Date.civil(2004,3,20), Date.civil(2005,3,20), Date.civil(2006,3,21),
   Date.civil(2007,3,21), Date.civil(2008,3,20), Date.civil(2009,3,20),
   Date.civil(2010,3,21)].each do |date|
    assert_equal '春分の日', Holidays.on(date, :jp)[0][:name]
  end

  # national culture day
  [Date.civil(2004,9,23), Date.civil(2005,9,23), Date.civil(2006,9,23),
   Date.civil(2007,9,23), Date.civil(2008,9,23), Date.civil(2009,9,23),
   Date.civil(2010,9,23), Date.civil(2011,9,23), Date.civil(2012,9,22),
   Date.civil(2013,9,23)].each do |date|
    assert_equal '秋分の日', Holidays.on(date, :jp)[0][:name]
  end

  # citizens holiday
  [Date.civil(2032,9,21), Date.civil(2049,9,21), Date.civil(2009,9,22),
   Date.civil(2015,9,22), Date.civil(2026,9,22)].each do |date|
    assert_equal '国民の休日', Holidays.on(date, :jp)[0][:name]
  end

  # marine day since 1996
  [Date.civil(1996, 7, 20), Date.civil(2002, 7, 20), Date.civil(2003, 7, 21),
   Date.civil(2004, 7, 19), Date.civil(2005, 7, 18), Date.civil(2006, 7, 17),
   Date.civil(2007, 7, 16), Date.civil(2009, 7, 20), Date.civil(2013, 7, 15),
   Date.civil(2014, 7, 21)].each do |date|
    assert_equal '海の日', Holidays.on(date, :jp)[0][:name]
  end

  # mountain holiday start since 2016
  [Date.civil(2016,8,11), Date.civil(2017,8,11),Date.civil(2018,8,11),
   Date.civil(2019,8,11), Date.civil(2020,8,11),Date.civil(2021,8,11),
   Date.civil(2022,8,11)].each do |date|
    assert_equal '山の日', Holidays.on(date, :jp)[0][:name]
  end

  # before 2016, there is no mountain holiday.
  assert_nil Holidays.on(Date.civil(2015,8,11), :jp)[0]

  # before 2003, there is no citizens holiday.
  # [note] citizens holiday requires that jp_national_culture_day is wednesday.
  #        Before 2003, the closest past year that mathches above condition is 1998.
  assert_nil Holidays.on(Date.civil(1998,9,22), :jp)[0]